// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/alphagov/paas-elasticache-broker/providers"
	"github.com/aws/aws-sdk-go/service/secretsmanager"
)

type FakeSecretsManager struct {
	CreateSecretStub        func(input *secretsmanager.CreateSecretInput) (*secretsmanager.CreateSecretOutput, error)
	createSecretMutex       sync.RWMutex
	createSecretArgsForCall []struct {
		input *secretsmanager.CreateSecretInput
	}
	createSecretReturns struct {
		result1 *secretsmanager.CreateSecretOutput
		result2 error
	}
	createSecretReturnsOnCall map[int]struct {
		result1 *secretsmanager.CreateSecretOutput
		result2 error
	}
	GetSecretValueStub        func(input *secretsmanager.GetSecretValueInput) (*secretsmanager.GetSecretValueOutput, error)
	getSecretValueMutex       sync.RWMutex
	getSecretValueArgsForCall []struct {
		input *secretsmanager.GetSecretValueInput
	}
	getSecretValueReturns struct {
		result1 *secretsmanager.GetSecretValueOutput
		result2 error
	}
	getSecretValueReturnsOnCall map[int]struct {
		result1 *secretsmanager.GetSecretValueOutput
		result2 error
	}
	DeleteSecretStub        func(input *secretsmanager.DeleteSecretInput) (*secretsmanager.DeleteSecretOutput, error)
	deleteSecretMutex       sync.RWMutex
	deleteSecretArgsForCall []struct {
		input *secretsmanager.DeleteSecretInput
	}
	deleteSecretReturns struct {
		result1 *secretsmanager.DeleteSecretOutput
		result2 error
	}
	deleteSecretReturnsOnCall map[int]struct {
		result1 *secretsmanager.DeleteSecretOutput
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSecretsManager) CreateSecret(input *secretsmanager.CreateSecretInput) (*secretsmanager.CreateSecretOutput, error) {
	fake.createSecretMutex.Lock()
	ret, specificReturn := fake.createSecretReturnsOnCall[len(fake.createSecretArgsForCall)]
	fake.createSecretArgsForCall = append(fake.createSecretArgsForCall, struct {
		input *secretsmanager.CreateSecretInput
	}{input})
	fake.recordInvocation("CreateSecret", []interface{}{input})
	fake.createSecretMutex.Unlock()
	if fake.CreateSecretStub != nil {
		return fake.CreateSecretStub(input)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.createSecretReturns.result1, fake.createSecretReturns.result2
}

func (fake *FakeSecretsManager) CreateSecretCallCount() int {
	fake.createSecretMutex.RLock()
	defer fake.createSecretMutex.RUnlock()
	return len(fake.createSecretArgsForCall)
}

func (fake *FakeSecretsManager) CreateSecretArgsForCall(i int) *secretsmanager.CreateSecretInput {
	fake.createSecretMutex.RLock()
	defer fake.createSecretMutex.RUnlock()
	return fake.createSecretArgsForCall[i].input
}

func (fake *FakeSecretsManager) CreateSecretReturns(result1 *secretsmanager.CreateSecretOutput, result2 error) {
	fake.CreateSecretStub = nil
	fake.createSecretReturns = struct {
		result1 *secretsmanager.CreateSecretOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSecretsManager) CreateSecretReturnsOnCall(i int, result1 *secretsmanager.CreateSecretOutput, result2 error) {
	fake.CreateSecretStub = nil
	if fake.createSecretReturnsOnCall == nil {
		fake.createSecretReturnsOnCall = make(map[int]struct {
			result1 *secretsmanager.CreateSecretOutput
			result2 error
		})
	}
	fake.createSecretReturnsOnCall[i] = struct {
		result1 *secretsmanager.CreateSecretOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSecretsManager) GetSecretValue(input *secretsmanager.GetSecretValueInput) (*secretsmanager.GetSecretValueOutput, error) {
	fake.getSecretValueMutex.Lock()
	ret, specificReturn := fake.getSecretValueReturnsOnCall[len(fake.getSecretValueArgsForCall)]
	fake.getSecretValueArgsForCall = append(fake.getSecretValueArgsForCall, struct {
		input *secretsmanager.GetSecretValueInput
	}{input})
	fake.recordInvocation("GetSecretValue", []interface{}{input})
	fake.getSecretValueMutex.Unlock()
	if fake.GetSecretValueStub != nil {
		return fake.GetSecretValueStub(input)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getSecretValueReturns.result1, fake.getSecretValueReturns.result2
}

func (fake *FakeSecretsManager) GetSecretValueCallCount() int {
	fake.getSecretValueMutex.RLock()
	defer fake.getSecretValueMutex.RUnlock()
	return len(fake.getSecretValueArgsForCall)
}

func (fake *FakeSecretsManager) GetSecretValueArgsForCall(i int) *secretsmanager.GetSecretValueInput {
	fake.getSecretValueMutex.RLock()
	defer fake.getSecretValueMutex.RUnlock()
	return fake.getSecretValueArgsForCall[i].input
}

func (fake *FakeSecretsManager) GetSecretValueReturns(result1 *secretsmanager.GetSecretValueOutput, result2 error) {
	fake.GetSecretValueStub = nil
	fake.getSecretValueReturns = struct {
		result1 *secretsmanager.GetSecretValueOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSecretsManager) GetSecretValueReturnsOnCall(i int, result1 *secretsmanager.GetSecretValueOutput, result2 error) {
	fake.GetSecretValueStub = nil
	if fake.getSecretValueReturnsOnCall == nil {
		fake.getSecretValueReturnsOnCall = make(map[int]struct {
			result1 *secretsmanager.GetSecretValueOutput
			result2 error
		})
	}
	fake.getSecretValueReturnsOnCall[i] = struct {
		result1 *secretsmanager.GetSecretValueOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSecretsManager) DeleteSecret(input *secretsmanager.DeleteSecretInput) (*secretsmanager.DeleteSecretOutput, error) {
	fake.deleteSecretMutex.Lock()
	ret, specificReturn := fake.deleteSecretReturnsOnCall[len(fake.deleteSecretArgsForCall)]
	fake.deleteSecretArgsForCall = append(fake.deleteSecretArgsForCall, struct {
		input *secretsmanager.DeleteSecretInput
	}{input})
	fake.recordInvocation("DeleteSecret", []interface{}{input})
	fake.deleteSecretMutex.Unlock()
	if fake.DeleteSecretStub != nil {
		return fake.DeleteSecretStub(input)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.deleteSecretReturns.result1, fake.deleteSecretReturns.result2
}

func (fake *FakeSecretsManager) DeleteSecretCallCount() int {
	fake.deleteSecretMutex.RLock()
	defer fake.deleteSecretMutex.RUnlock()
	return len(fake.deleteSecretArgsForCall)
}

func (fake *FakeSecretsManager) DeleteSecretArgsForCall(i int) *secretsmanager.DeleteSecretInput {
	fake.deleteSecretMutex.RLock()
	defer fake.deleteSecretMutex.RUnlock()
	return fake.deleteSecretArgsForCall[i].input
}

func (fake *FakeSecretsManager) DeleteSecretReturns(result1 *secretsmanager.DeleteSecretOutput, result2 error) {
	fake.DeleteSecretStub = nil
	fake.deleteSecretReturns = struct {
		result1 *secretsmanager.DeleteSecretOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSecretsManager) DeleteSecretReturnsOnCall(i int, result1 *secretsmanager.DeleteSecretOutput, result2 error) {
	fake.DeleteSecretStub = nil
	if fake.deleteSecretReturnsOnCall == nil {
		fake.deleteSecretReturnsOnCall = make(map[int]struct {
			result1 *secretsmanager.DeleteSecretOutput
			result2 error
		})
	}
	fake.deleteSecretReturnsOnCall[i] = struct {
		result1 *secretsmanager.DeleteSecretOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSecretsManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createSecretMutex.RLock()
	defer fake.createSecretMutex.RUnlock()
	fake.getSecretValueMutex.RLock()
	defer fake.getSecretValueMutex.RUnlock()
	fake.deleteSecretMutex.RLock()
	defer fake.deleteSecretMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeSecretsManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ providers.SecretsManager = new(FakeSecretsManager)
