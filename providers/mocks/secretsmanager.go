// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/alphagov/paas-elasticache-broker/providers"
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/secretsmanager"
)

type FakeSecretsManager struct {
	CreateSecretWithContextStub        func(ctx aws.Context, input *secretsmanager.CreateSecretInput, opts ...request.Option) (*secretsmanager.CreateSecretOutput, error)
	createSecretWithContextMutex       sync.RWMutex
	createSecretWithContextArgsForCall []struct {
		ctx   aws.Context
		input *secretsmanager.CreateSecretInput
		opts  []request.Option
	}
	createSecretWithContextReturns struct {
		result1 *secretsmanager.CreateSecretOutput
		result2 error
	}
	createSecretWithContextReturnsOnCall map[int]struct {
		result1 *secretsmanager.CreateSecretOutput
		result2 error
	}
	GetSecretValueWithContextStub        func(ctx aws.Context, input *secretsmanager.GetSecretValueInput, opts ...request.Option) (*secretsmanager.GetSecretValueOutput, error)
	getSecretValueWithContextMutex       sync.RWMutex
	getSecretValueWithContextArgsForCall []struct {
		ctx   aws.Context
		input *secretsmanager.GetSecretValueInput
		opts  []request.Option
	}
	getSecretValueWithContextReturns struct {
		result1 *secretsmanager.GetSecretValueOutput
		result2 error
	}
	getSecretValueWithContextReturnsOnCall map[int]struct {
		result1 *secretsmanager.GetSecretValueOutput
		result2 error
	}
	DeleteSecretWithContextStub        func(ctx aws.Context, input *secretsmanager.DeleteSecretInput, opts ...request.Option) (*secretsmanager.DeleteSecretOutput, error)
	deleteSecretWithContextMutex       sync.RWMutex
	deleteSecretWithContextArgsForCall []struct {
		ctx   aws.Context
		input *secretsmanager.DeleteSecretInput
		opts  []request.Option
	}
	deleteSecretWithContextReturns struct {
		result1 *secretsmanager.DeleteSecretOutput
		result2 error
	}
	deleteSecretWithContextReturnsOnCall map[int]struct {
		result1 *secretsmanager.DeleteSecretOutput
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSecretsManager) CreateSecretWithContext(ctx aws.Context, input *secretsmanager.CreateSecretInput, opts ...request.Option) (*secretsmanager.CreateSecretOutput, error) {
	fake.createSecretWithContextMutex.Lock()
	ret, specificReturn := fake.createSecretWithContextReturnsOnCall[len(fake.createSecretWithContextArgsForCall)]
	fake.createSecretWithContextArgsForCall = append(fake.createSecretWithContextArgsForCall, struct {
		ctx   aws.Context
		input *secretsmanager.CreateSecretInput
		opts  []request.Option
	}{ctx, input, opts})
	fake.recordInvocation("CreateSecretWithContext", []interface{}{ctx, input, opts})
	fake.createSecretWithContextMutex.Unlock()
	if fake.CreateSecretWithContextStub != nil {
		return fake.CreateSecretWithContextStub(ctx, input, opts...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.createSecretWithContextReturns.result1, fake.createSecretWithContextReturns.result2
}

func (fake *FakeSecretsManager) CreateSecretWithContextCallCount() int {
	fake.createSecretWithContextMutex.RLock()
	defer fake.createSecretWithContextMutex.RUnlock()
	return len(fake.createSecretWithContextArgsForCall)
}

func (fake *FakeSecretsManager) CreateSecretWithContextArgsForCall(i int) (aws.Context, *secretsmanager.CreateSecretInput, []request.Option) {
	fake.createSecretWithContextMutex.RLock()
	defer fake.createSecretWithContextMutex.RUnlock()
	return fake.createSecretWithContextArgsForCall[i].ctx, fake.createSecretWithContextArgsForCall[i].input, fake.createSecretWithContextArgsForCall[i].opts
}

func (fake *FakeSecretsManager) CreateSecretWithContextReturns(result1 *secretsmanager.CreateSecretOutput, result2 error) {
	fake.CreateSecretWithContextStub = nil
	fake.createSecretWithContextReturns = struct {
		result1 *secretsmanager.CreateSecretOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSecretsManager) CreateSecretWithContextReturnsOnCall(i int, result1 *secretsmanager.CreateSecretOutput, result2 error) {
	fake.CreateSecretWithContextStub = nil
	if fake.createSecretWithContextReturnsOnCall == nil {
		fake.createSecretWithContextReturnsOnCall = make(map[int]struct {
			result1 *secretsmanager.CreateSecretOutput
			result2 error
		})
	}
	fake.createSecretWithContextReturnsOnCall[i] = struct {
		result1 *secretsmanager.CreateSecretOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSecretsManager) GetSecretValueWithContext(ctx aws.Context, input *secretsmanager.GetSecretValueInput, opts ...request.Option) (*secretsmanager.GetSecretValueOutput, error) {
	fake.getSecretValueWithContextMutex.Lock()
	ret, specificReturn := fake.getSecretValueWithContextReturnsOnCall[len(fake.getSecretValueWithContextArgsForCall)]
	fake.getSecretValueWithContextArgsForCall = append(fake.getSecretValueWithContextArgsForCall, struct {
		ctx   aws.Context
		input *secretsmanager.GetSecretValueInput
		opts  []request.Option
	}{ctx, input, opts})
	fake.recordInvocation("GetSecretValueWithContext", []interface{}{ctx, input, opts})
	fake.getSecretValueWithContextMutex.Unlock()
	if fake.GetSecretValueWithContextStub != nil {
		return fake.GetSecretValueWithContextStub(ctx, input, opts...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getSecretValueWithContextReturns.result1, fake.getSecretValueWithContextReturns.result2
}

func (fake *FakeSecretsManager) GetSecretValueWithContextCallCount() int {
	fake.getSecretValueWithContextMutex.RLock()
	defer fake.getSecretValueWithContextMutex.RUnlock()
	return len(fake.getSecretValueWithContextArgsForCall)
}

func (fake *FakeSecretsManager) GetSecretValueWithContextArgsForCall(i int) (aws.Context, *secretsmanager.GetSecretValueInput, []request.Option) {
	fake.getSecretValueWithContextMutex.RLock()
	defer fake.getSecretValueWithContextMutex.RUnlock()
	return fake.getSecretValueWithContextArgsForCall[i].ctx, fake.getSecretValueWithContextArgsForCall[i].input, fake.getSecretValueWithContextArgsForCall[i].opts
}

func (fake *FakeSecretsManager) GetSecretValueWithContextReturns(result1 *secretsmanager.GetSecretValueOutput, result2 error) {
	fake.GetSecretValueWithContextStub = nil
	fake.getSecretValueWithContextReturns = struct {
		result1 *secretsmanager.GetSecretValueOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSecretsManager) GetSecretValueWithContextReturnsOnCall(i int, result1 *secretsmanager.GetSecretValueOutput, result2 error) {
	fake.GetSecretValueWithContextStub = nil
	if fake.getSecretValueWithContextReturnsOnCall == nil {
		fake.getSecretValueWithContextReturnsOnCall = make(map[int]struct {
			result1 *secretsmanager.GetSecretValueOutput
			result2 error
		})
	}
	fake.getSecretValueWithContextReturnsOnCall[i] = struct {
		result1 *secretsmanager.GetSecretValueOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSecretsManager) DeleteSecretWithContext(ctx aws.Context, input *secretsmanager.DeleteSecretInput, opts ...request.Option) (*secretsmanager.DeleteSecretOutput, error) {
	fake.deleteSecretWithContextMutex.Lock()
	ret, specificReturn := fake.deleteSecretWithContextReturnsOnCall[len(fake.deleteSecretWithContextArgsForCall)]
	fake.deleteSecretWithContextArgsForCall = append(fake.deleteSecretWithContextArgsForCall, struct {
		ctx   aws.Context
		input *secretsmanager.DeleteSecretInput
		opts  []request.Option
	}{ctx, input, opts})
	fake.recordInvocation("DeleteSecretWithContext", []interface{}{ctx, input, opts})
	fake.deleteSecretWithContextMutex.Unlock()
	if fake.DeleteSecretWithContextStub != nil {
		return fake.DeleteSecretWithContextStub(ctx, input, opts...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.deleteSecretWithContextReturns.result1, fake.deleteSecretWithContextReturns.result2
}

func (fake *FakeSecretsManager) DeleteSecretWithContextCallCount() int {
	fake.deleteSecretWithContextMutex.RLock()
	defer fake.deleteSecretWithContextMutex.RUnlock()
	return len(fake.deleteSecretWithContextArgsForCall)
}

func (fake *FakeSecretsManager) DeleteSecretWithContextArgsForCall(i int) (aws.Context, *secretsmanager.DeleteSecretInput, []request.Option) {
	fake.deleteSecretWithContextMutex.RLock()
	defer fake.deleteSecretWithContextMutex.RUnlock()
	return fake.deleteSecretWithContextArgsForCall[i].ctx, fake.deleteSecretWithContextArgsForCall[i].input, fake.deleteSecretWithContextArgsForCall[i].opts
}

func (fake *FakeSecretsManager) DeleteSecretWithContextReturns(result1 *secretsmanager.DeleteSecretOutput, result2 error) {
	fake.DeleteSecretWithContextStub = nil
	fake.deleteSecretWithContextReturns = struct {
		result1 *secretsmanager.DeleteSecretOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSecretsManager) DeleteSecretWithContextReturnsOnCall(i int, result1 *secretsmanager.DeleteSecretOutput, result2 error) {
	fake.DeleteSecretWithContextStub = nil
	if fake.deleteSecretWithContextReturnsOnCall == nil {
		fake.deleteSecretWithContextReturnsOnCall = make(map[int]struct {
			result1 *secretsmanager.DeleteSecretOutput
			result2 error
		})
	}
	fake.deleteSecretWithContextReturnsOnCall[i] = struct {
		result1 *secretsmanager.DeleteSecretOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeSecretsManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createSecretWithContextMutex.RLock()
	defer fake.createSecretWithContextMutex.RUnlock()
	fake.getSecretValueWithContextMutex.RLock()
	defer fake.getSecretValueWithContextMutex.RUnlock()
	fake.deleteSecretWithContextMutex.RLock()
	defer fake.deleteSecretWithContextMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeSecretsManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ providers.SecretsManager = new(FakeSecretsManager)
