// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/alphagov/paas-elasticache-broker/providers"
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/elasticache"
)

type FakeElastiCache struct {
	CreateCacheParameterGroupWithContextStub        func(ctx aws.Context, input *elasticache.CreateCacheParameterGroupInput, opts ...request.Option) (*elasticache.CreateCacheParameterGroupOutput, error)
	createCacheParameterGroupWithContextMutex       sync.RWMutex
	createCacheParameterGroupWithContextArgsForCall []struct {
		ctx   aws.Context
		input *elasticache.CreateCacheParameterGroupInput
		opts  []request.Option
	}
	createCacheParameterGroupWithContextReturns struct {
		result1 *elasticache.CreateCacheParameterGroupOutput
		result2 error
	}
	createCacheParameterGroupWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.CreateCacheParameterGroupOutput
		result2 error
	}
	CreateReplicationGroupWithContextStub        func(ctx aws.Context, input *elasticache.CreateReplicationGroupInput, opts ...request.Option) (*elasticache.CreateReplicationGroupOutput, error)
	createReplicationGroupWithContextMutex       sync.RWMutex
	createReplicationGroupWithContextArgsForCall []struct {
		ctx   aws.Context
		input *elasticache.CreateReplicationGroupInput
		opts  []request.Option
	}
	createReplicationGroupWithContextReturns struct {
		result1 *elasticache.CreateReplicationGroupOutput
		result2 error
	}
	createReplicationGroupWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.CreateReplicationGroupOutput
		result2 error
	}
	DeleteCacheParameterGroupWithContextStub        func(ctx aws.Context, input *elasticache.DeleteCacheParameterGroupInput, opts ...request.Option) (*elasticache.DeleteCacheParameterGroupOutput, error)
	deleteCacheParameterGroupWithContextMutex       sync.RWMutex
	deleteCacheParameterGroupWithContextArgsForCall []struct {
		ctx   aws.Context
		input *elasticache.DeleteCacheParameterGroupInput
		opts  []request.Option
	}
	deleteCacheParameterGroupWithContextReturns struct {
		result1 *elasticache.DeleteCacheParameterGroupOutput
		result2 error
	}
	deleteCacheParameterGroupWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.DeleteCacheParameterGroupOutput
		result2 error
	}
	DeleteReplicationGroupWithContextStub        func(ctx aws.Context, input *elasticache.DeleteReplicationGroupInput, opts ...request.Option) (*elasticache.DeleteReplicationGroupOutput, error)
	deleteReplicationGroupWithContextMutex       sync.RWMutex
	deleteReplicationGroupWithContextArgsForCall []struct {
		ctx   aws.Context
		input *elasticache.DeleteReplicationGroupInput
		opts  []request.Option
	}
	deleteReplicationGroupWithContextReturns struct {
		result1 *elasticache.DeleteReplicationGroupOutput
		result2 error
	}
	deleteReplicationGroupWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.DeleteReplicationGroupOutput
		result2 error
	}
	DescribeReplicationGroupsWithContextStub        func(ctx aws.Context, input *elasticache.DescribeReplicationGroupsInput, opts ...request.Option) (*elasticache.DescribeReplicationGroupsOutput, error)
	describeReplicationGroupsWithContextMutex       sync.RWMutex
	describeReplicationGroupsWithContextArgsForCall []struct {
		ctx   aws.Context
		input *elasticache.DescribeReplicationGroupsInput
		opts  []request.Option
	}
	describeReplicationGroupsWithContextReturns struct {
		result1 *elasticache.DescribeReplicationGroupsOutput
		result2 error
	}
	describeReplicationGroupsWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.DescribeReplicationGroupsOutput
		result2 error
	}
	DescribeCacheClustersWithContextStub        func(ctx aws.Context, input *elasticache.DescribeCacheClustersInput, opts ...request.Option) (*elasticache.DescribeCacheClustersOutput, error)
	describeCacheClustersWithContextMutex       sync.RWMutex
	describeCacheClustersWithContextArgsForCall []struct {
		ctx   aws.Context
		input *elasticache.DescribeCacheClustersInput
		opts  []request.Option
	}
	describeCacheClustersWithContextReturns struct {
		result1 *elasticache.DescribeCacheClustersOutput
		result2 error
	}
	describeCacheClustersWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.DescribeCacheClustersOutput
		result2 error
	}
	DescribeCacheParametersWithContextStub        func(ctx aws.Context, input *elasticache.DescribeCacheParametersInput, opts ...request.Option) (*elasticache.DescribeCacheParametersOutput, error)
	describeCacheParametersWithContextMutex       sync.RWMutex
	describeCacheParametersWithContextArgsForCall []struct {
		ctx   aws.Context
		input *elasticache.DescribeCacheParametersInput
		opts  []request.Option
	}
	describeCacheParametersWithContextReturns struct {
		result1 *elasticache.DescribeCacheParametersOutput
		result2 error
	}
	describeCacheParametersWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.DescribeCacheParametersOutput
		result2 error
	}
	ModifyCacheParameterGroupWithContextStub        func(ctx aws.Context, input *elasticache.ModifyCacheParameterGroupInput, opts ...request.Option) (*elasticache.CacheParameterGroupNameMessage, error)
	modifyCacheParameterGroupWithContextMutex       sync.RWMutex
	modifyCacheParameterGroupWithContextArgsForCall []struct {
		ctx   aws.Context
		input *elasticache.ModifyCacheParameterGroupInput
		opts  []request.Option
	}
	modifyCacheParameterGroupWithContextReturns struct {
		result1 *elasticache.CacheParameterGroupNameMessage
		result2 error
	}
	modifyCacheParameterGroupWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.CacheParameterGroupNameMessage
		result2 error
	}
	DescribeSnapshotsPagesWithContextStub        func(ctx aws.Context, input *elasticache.DescribeSnapshotsInput, fn func(*elasticache.DescribeSnapshotsOutput, bool) bool, opts ...request.Option) error
	describeSnapshotsPagesWithContextMutex       sync.RWMutex
	describeSnapshotsPagesWithContextArgsForCall []struct {
		ctx   aws.Context
		input *elasticache.DescribeSnapshotsInput
		fn    func(*elasticache.DescribeSnapshotsOutput, bool) bool
		opts  []request.Option
	}
	describeSnapshotsPagesWithContextReturns struct {
		result1 error
	}
	describeSnapshotsPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	ListTagsForResourceWithContextStub        func(ctx aws.Context, input *elasticache.ListTagsForResourceInput, opts ...request.Option) (*elasticache.TagListMessage, error)
	listTagsForResourceWithContextMutex       sync.RWMutex
	listTagsForResourceWithContextArgsForCall []struct {
		ctx   aws.Context
		input *elasticache.ListTagsForResourceInput
		opts  []request.Option
	}
	listTagsForResourceWithContextReturns struct {
		result1 *elasticache.TagListMessage
		result2 error
	}
	listTagsForResourceWithContextReturnsOnCall map[int]struct {
		result1 *elasticache.TagListMessage
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeElastiCache) CreateCacheParameterGroupWithContext(ctx aws.Context, input *elasticache.CreateCacheParameterGroupInput, opts ...request.Option) (*elasticache.CreateCacheParameterGroupOutput, error) {
	fake.createCacheParameterGroupWithContextMutex.Lock()
	ret, specificReturn := fake.createCacheParameterGroupWithContextReturnsOnCall[len(fake.createCacheParameterGroupWithContextArgsForCall)]
	fake.createCacheParameterGroupWithContextArgsForCall = append(fake.createCacheParameterGroupWithContextArgsForCall, struct {
		ctx   aws.Context
		input *elasticache.CreateCacheParameterGroupInput
		opts  []request.Option
	}{ctx, input, opts})
	fake.recordInvocation("CreateCacheParameterGroupWithContext", []interface{}{ctx, input, opts})
	fake.createCacheParameterGroupWithContextMutex.Unlock()
	if fake.CreateCacheParameterGroupWithContextStub != nil {
		return fake.CreateCacheParameterGroupWithContextStub(ctx, input, opts...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.createCacheParameterGroupWithContextReturns.result1, fake.createCacheParameterGroupWithContextReturns.result2
}

func (fake *FakeElastiCache) CreateCacheParameterGroupWithContextCallCount() int {
	fake.createCacheParameterGroupWithContextMutex.RLock()
	defer fake.createCacheParameterGroupWithContextMutex.RUnlock()
	return len(fake.createCacheParameterGroupWithContextArgsForCall)
}

func (fake *FakeElastiCache) CreateCacheParameterGroupWithContextArgsForCall(i int) (aws.Context, *elasticache.CreateCacheParameterGroupInput, []request.Option) {
	fake.createCacheParameterGroupWithContextMutex.RLock()
	defer fake.createCacheParameterGroupWithContextMutex.RUnlock()
	return fake.createCacheParameterGroupWithContextArgsForCall[i].ctx, fake.createCacheParameterGroupWithContextArgsForCall[i].input, fake.createCacheParameterGroupWithContextArgsForCall[i].opts
}

func (fake *FakeElastiCache) CreateCacheParameterGroupWithContextReturns(result1 *elasticache.CreateCacheParameterGroupOutput, result2 error) {
	fake.CreateCacheParameterGroupWithContextStub = nil
	fake.createCacheParameterGroupWithContextReturns = struct {
		result1 *elasticache.CreateCacheParameterGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCache) CreateCacheParameterGroupWithContextReturnsOnCall(i int, result1 *elasticache.CreateCacheParameterGroupOutput, result2 error) {
	fake.CreateCacheParameterGroupWithContextStub = nil
	if fake.createCacheParameterGroupWithContextReturnsOnCall == nil {
		fake.createCacheParameterGroupWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.CreateCacheParameterGroupOutput
			result2 error
		})
	}
	fake.createCacheParameterGroupWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.CreateCacheParameterGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCache) CreateReplicationGroupWithContext(ctx aws.Context, input *elasticache.CreateReplicationGroupInput, opts ...request.Option) (*elasticache.CreateReplicationGroupOutput, error) {
	fake.createReplicationGroupWithContextMutex.Lock()
	ret, specificReturn := fake.createReplicationGroupWithContextReturnsOnCall[len(fake.createReplicationGroupWithContextArgsForCall)]
	fake.createReplicationGroupWithContextArgsForCall = append(fake.createReplicationGroupWithContextArgsForCall, struct {
		ctx   aws.Context
		input *elasticache.CreateReplicationGroupInput
		opts  []request.Option
	}{ctx, input, opts})
	fake.recordInvocation("CreateReplicationGroupWithContext", []interface{}{ctx, input, opts})
	fake.createReplicationGroupWithContextMutex.Unlock()
	if fake.CreateReplicationGroupWithContextStub != nil {
		return fake.CreateReplicationGroupWithContextStub(ctx, input, opts...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.createReplicationGroupWithContextReturns.result1, fake.createReplicationGroupWithContextReturns.result2
}

func (fake *FakeElastiCache) CreateReplicationGroupWithContextCallCount() int {
	fake.createReplicationGroupWithContextMutex.RLock()
	defer fake.createReplicationGroupWithContextMutex.RUnlock()
	return len(fake.createReplicationGroupWithContextArgsForCall)
}

func (fake *FakeElastiCache) CreateReplicationGroupWithContextArgsForCall(i int) (aws.Context, *elasticache.CreateReplicationGroupInput, []request.Option) {
	fake.createReplicationGroupWithContextMutex.RLock()
	defer fake.createReplicationGroupWithContextMutex.RUnlock()
	return fake.createReplicationGroupWithContextArgsForCall[i].ctx, fake.createReplicationGroupWithContextArgsForCall[i].input, fake.createReplicationGroupWithContextArgsForCall[i].opts
}

func (fake *FakeElastiCache) CreateReplicationGroupWithContextReturns(result1 *elasticache.CreateReplicationGroupOutput, result2 error) {
	fake.CreateReplicationGroupWithContextStub = nil
	fake.createReplicationGroupWithContextReturns = struct {
		result1 *elasticache.CreateReplicationGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCache) CreateReplicationGroupWithContextReturnsOnCall(i int, result1 *elasticache.CreateReplicationGroupOutput, result2 error) {
	fake.CreateReplicationGroupWithContextStub = nil
	if fake.createReplicationGroupWithContextReturnsOnCall == nil {
		fake.createReplicationGroupWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.CreateReplicationGroupOutput
			result2 error
		})
	}
	fake.createReplicationGroupWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.CreateReplicationGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCache) DeleteCacheParameterGroupWithContext(ctx aws.Context, input *elasticache.DeleteCacheParameterGroupInput, opts ...request.Option) (*elasticache.DeleteCacheParameterGroupOutput, error) {
	fake.deleteCacheParameterGroupWithContextMutex.Lock()
	ret, specificReturn := fake.deleteCacheParameterGroupWithContextReturnsOnCall[len(fake.deleteCacheParameterGroupWithContextArgsForCall)]
	fake.deleteCacheParameterGroupWithContextArgsForCall = append(fake.deleteCacheParameterGroupWithContextArgsForCall, struct {
		ctx   aws.Context
		input *elasticache.DeleteCacheParameterGroupInput
		opts  []request.Option
	}{ctx, input, opts})
	fake.recordInvocation("DeleteCacheParameterGroupWithContext", []interface{}{ctx, input, opts})
	fake.deleteCacheParameterGroupWithContextMutex.Unlock()
	if fake.DeleteCacheParameterGroupWithContextStub != nil {
		return fake.DeleteCacheParameterGroupWithContextStub(ctx, input, opts...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.deleteCacheParameterGroupWithContextReturns.result1, fake.deleteCacheParameterGroupWithContextReturns.result2
}

func (fake *FakeElastiCache) DeleteCacheParameterGroupWithContextCallCount() int {
	fake.deleteCacheParameterGroupWithContextMutex.RLock()
	defer fake.deleteCacheParameterGroupWithContextMutex.RUnlock()
	return len(fake.deleteCacheParameterGroupWithContextArgsForCall)
}

func (fake *FakeElastiCache) DeleteCacheParameterGroupWithContextArgsForCall(i int) (aws.Context, *elasticache.DeleteCacheParameterGroupInput, []request.Option) {
	fake.deleteCacheParameterGroupWithContextMutex.RLock()
	defer fake.deleteCacheParameterGroupWithContextMutex.RUnlock()
	return fake.deleteCacheParameterGroupWithContextArgsForCall[i].ctx, fake.deleteCacheParameterGroupWithContextArgsForCall[i].input, fake.deleteCacheParameterGroupWithContextArgsForCall[i].opts
}

func (fake *FakeElastiCache) DeleteCacheParameterGroupWithContextReturns(result1 *elasticache.DeleteCacheParameterGroupOutput, result2 error) {
	fake.DeleteCacheParameterGroupWithContextStub = nil
	fake.deleteCacheParameterGroupWithContextReturns = struct {
		result1 *elasticache.DeleteCacheParameterGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCache) DeleteCacheParameterGroupWithContextReturnsOnCall(i int, result1 *elasticache.DeleteCacheParameterGroupOutput, result2 error) {
	fake.DeleteCacheParameterGroupWithContextStub = nil
	if fake.deleteCacheParameterGroupWithContextReturnsOnCall == nil {
		fake.deleteCacheParameterGroupWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.DeleteCacheParameterGroupOutput
			result2 error
		})
	}
	fake.deleteCacheParameterGroupWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.DeleteCacheParameterGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCache) DeleteReplicationGroupWithContext(ctx aws.Context, input *elasticache.DeleteReplicationGroupInput, opts ...request.Option) (*elasticache.DeleteReplicationGroupOutput, error) {
	fake.deleteReplicationGroupWithContextMutex.Lock()
	ret, specificReturn := fake.deleteReplicationGroupWithContextReturnsOnCall[len(fake.deleteReplicationGroupWithContextArgsForCall)]
	fake.deleteReplicationGroupWithContextArgsForCall = append(fake.deleteReplicationGroupWithContextArgsForCall, struct {
		ctx   aws.Context
		input *elasticache.DeleteReplicationGroupInput
		opts  []request.Option
	}{ctx, input, opts})
	fake.recordInvocation("DeleteReplicationGroupWithContext", []interface{}{ctx, input, opts})
	fake.deleteReplicationGroupWithContextMutex.Unlock()
	if fake.DeleteReplicationGroupWithContextStub != nil {
		return fake.DeleteReplicationGroupWithContextStub(ctx, input, opts...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.deleteReplicationGroupWithContextReturns.result1, fake.deleteReplicationGroupWithContextReturns.result2
}

func (fake *FakeElastiCache) DeleteReplicationGroupWithContextCallCount() int {
	fake.deleteReplicationGroupWithContextMutex.RLock()
	defer fake.deleteReplicationGroupWithContextMutex.RUnlock()
	return len(fake.deleteReplicationGroupWithContextArgsForCall)
}

func (fake *FakeElastiCache) DeleteReplicationGroupWithContextArgsForCall(i int) (aws.Context, *elasticache.DeleteReplicationGroupInput, []request.Option) {
	fake.deleteReplicationGroupWithContextMutex.RLock()
	defer fake.deleteReplicationGroupWithContextMutex.RUnlock()
	return fake.deleteReplicationGroupWithContextArgsForCall[i].ctx, fake.deleteReplicationGroupWithContextArgsForCall[i].input, fake.deleteReplicationGroupWithContextArgsForCall[i].opts
}

func (fake *FakeElastiCache) DeleteReplicationGroupWithContextReturns(result1 *elasticache.DeleteReplicationGroupOutput, result2 error) {
	fake.DeleteReplicationGroupWithContextStub = nil
	fake.deleteReplicationGroupWithContextReturns = struct {
		result1 *elasticache.DeleteReplicationGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCache) DeleteReplicationGroupWithContextReturnsOnCall(i int, result1 *elasticache.DeleteReplicationGroupOutput, result2 error) {
	fake.DeleteReplicationGroupWithContextStub = nil
	if fake.deleteReplicationGroupWithContextReturnsOnCall == nil {
		fake.deleteReplicationGroupWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.DeleteReplicationGroupOutput
			result2 error
		})
	}
	fake.deleteReplicationGroupWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.DeleteReplicationGroupOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCache) DescribeReplicationGroupsWithContext(ctx aws.Context, input *elasticache.DescribeReplicationGroupsInput, opts ...request.Option) (*elasticache.DescribeReplicationGroupsOutput, error) {
	fake.describeReplicationGroupsWithContextMutex.Lock()
	ret, specificReturn := fake.describeReplicationGroupsWithContextReturnsOnCall[len(fake.describeReplicationGroupsWithContextArgsForCall)]
	fake.describeReplicationGroupsWithContextArgsForCall = append(fake.describeReplicationGroupsWithContextArgsForCall, struct {
		ctx   aws.Context
		input *elasticache.DescribeReplicationGroupsInput
		opts  []request.Option
	}{ctx, input, opts})
	fake.recordInvocation("DescribeReplicationGroupsWithContext", []interface{}{ctx, input, opts})
	fake.describeReplicationGroupsWithContextMutex.Unlock()
	if fake.DescribeReplicationGroupsWithContextStub != nil {
		return fake.DescribeReplicationGroupsWithContextStub(ctx, input, opts...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.describeReplicationGroupsWithContextReturns.result1, fake.describeReplicationGroupsWithContextReturns.result2
}

func (fake *FakeElastiCache) DescribeReplicationGroupsWithContextCallCount() int {
	fake.describeReplicationGroupsWithContextMutex.RLock()
	defer fake.describeReplicationGroupsWithContextMutex.RUnlock()
	return len(fake.describeReplicationGroupsWithContextArgsForCall)
}

func (fake *FakeElastiCache) DescribeReplicationGroupsWithContextArgsForCall(i int) (aws.Context, *elasticache.DescribeReplicationGroupsInput, []request.Option) {
	fake.describeReplicationGroupsWithContextMutex.RLock()
	defer fake.describeReplicationGroupsWithContextMutex.RUnlock()
	return fake.describeReplicationGroupsWithContextArgsForCall[i].ctx, fake.describeReplicationGroupsWithContextArgsForCall[i].input, fake.describeReplicationGroupsWithContextArgsForCall[i].opts
}

func (fake *FakeElastiCache) DescribeReplicationGroupsWithContextReturns(result1 *elasticache.DescribeReplicationGroupsOutput, result2 error) {
	fake.DescribeReplicationGroupsWithContextStub = nil
	fake.describeReplicationGroupsWithContextReturns = struct {
		result1 *elasticache.DescribeReplicationGroupsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCache) DescribeReplicationGroupsWithContextReturnsOnCall(i int, result1 *elasticache.DescribeReplicationGroupsOutput, result2 error) {
	fake.DescribeReplicationGroupsWithContextStub = nil
	if fake.describeReplicationGroupsWithContextReturnsOnCall == nil {
		fake.describeReplicationGroupsWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.DescribeReplicationGroupsOutput
			result2 error
		})
	}
	fake.describeReplicationGroupsWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.DescribeReplicationGroupsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCache) DescribeCacheClustersWithContext(ctx aws.Context, input *elasticache.DescribeCacheClustersInput, opts ...request.Option) (*elasticache.DescribeCacheClustersOutput, error) {
	fake.describeCacheClustersWithContextMutex.Lock()
	ret, specificReturn := fake.describeCacheClustersWithContextReturnsOnCall[len(fake.describeCacheClustersWithContextArgsForCall)]
	fake.describeCacheClustersWithContextArgsForCall = append(fake.describeCacheClustersWithContextArgsForCall, struct {
		ctx   aws.Context
		input *elasticache.DescribeCacheClustersInput
		opts  []request.Option
	}{ctx, input, opts})
	fake.recordInvocation("DescribeCacheClustersWithContext", []interface{}{ctx, input, opts})
	fake.describeCacheClustersWithContextMutex.Unlock()
	if fake.DescribeCacheClustersWithContextStub != nil {
		return fake.DescribeCacheClustersWithContextStub(ctx, input, opts...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.describeCacheClustersWithContextReturns.result1, fake.describeCacheClustersWithContextReturns.result2
}

func (fake *FakeElastiCache) DescribeCacheClustersWithContextCallCount() int {
	fake.describeCacheClustersWithContextMutex.RLock()
	defer fake.describeCacheClustersWithContextMutex.RUnlock()
	return len(fake.describeCacheClustersWithContextArgsForCall)
}

func (fake *FakeElastiCache) DescribeCacheClustersWithContextArgsForCall(i int) (aws.Context, *elasticache.DescribeCacheClustersInput, []request.Option) {
	fake.describeCacheClustersWithContextMutex.RLock()
	defer fake.describeCacheClustersWithContextMutex.RUnlock()
	return fake.describeCacheClustersWithContextArgsForCall[i].ctx, fake.describeCacheClustersWithContextArgsForCall[i].input, fake.describeCacheClustersWithContextArgsForCall[i].opts
}

func (fake *FakeElastiCache) DescribeCacheClustersWithContextReturns(result1 *elasticache.DescribeCacheClustersOutput, result2 error) {
	fake.DescribeCacheClustersWithContextStub = nil
	fake.describeCacheClustersWithContextReturns = struct {
		result1 *elasticache.DescribeCacheClustersOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCache) DescribeCacheClustersWithContextReturnsOnCall(i int, result1 *elasticache.DescribeCacheClustersOutput, result2 error) {
	fake.DescribeCacheClustersWithContextStub = nil
	if fake.describeCacheClustersWithContextReturnsOnCall == nil {
		fake.describeCacheClustersWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.DescribeCacheClustersOutput
			result2 error
		})
	}
	fake.describeCacheClustersWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.DescribeCacheClustersOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCache) DescribeCacheParametersWithContext(ctx aws.Context, input *elasticache.DescribeCacheParametersInput, opts ...request.Option) (*elasticache.DescribeCacheParametersOutput, error) {
	fake.describeCacheParametersWithContextMutex.Lock()
	ret, specificReturn := fake.describeCacheParametersWithContextReturnsOnCall[len(fake.describeCacheParametersWithContextArgsForCall)]
	fake.describeCacheParametersWithContextArgsForCall = append(fake.describeCacheParametersWithContextArgsForCall, struct {
		ctx   aws.Context
		input *elasticache.DescribeCacheParametersInput
		opts  []request.Option
	}{ctx, input, opts})
	fake.recordInvocation("DescribeCacheParametersWithContext", []interface{}{ctx, input, opts})
	fake.describeCacheParametersWithContextMutex.Unlock()
	if fake.DescribeCacheParametersWithContextStub != nil {
		return fake.DescribeCacheParametersWithContextStub(ctx, input, opts...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.describeCacheParametersWithContextReturns.result1, fake.describeCacheParametersWithContextReturns.result2
}

func (fake *FakeElastiCache) DescribeCacheParametersWithContextCallCount() int {
	fake.describeCacheParametersWithContextMutex.RLock()
	defer fake.describeCacheParametersWithContextMutex.RUnlock()
	return len(fake.describeCacheParametersWithContextArgsForCall)
}

func (fake *FakeElastiCache) DescribeCacheParametersWithContextArgsForCall(i int) (aws.Context, *elasticache.DescribeCacheParametersInput, []request.Option) {
	fake.describeCacheParametersWithContextMutex.RLock()
	defer fake.describeCacheParametersWithContextMutex.RUnlock()
	return fake.describeCacheParametersWithContextArgsForCall[i].ctx, fake.describeCacheParametersWithContextArgsForCall[i].input, fake.describeCacheParametersWithContextArgsForCall[i].opts
}

func (fake *FakeElastiCache) DescribeCacheParametersWithContextReturns(result1 *elasticache.DescribeCacheParametersOutput, result2 error) {
	fake.DescribeCacheParametersWithContextStub = nil
	fake.describeCacheParametersWithContextReturns = struct {
		result1 *elasticache.DescribeCacheParametersOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCache) DescribeCacheParametersWithContextReturnsOnCall(i int, result1 *elasticache.DescribeCacheParametersOutput, result2 error) {
	fake.DescribeCacheParametersWithContextStub = nil
	if fake.describeCacheParametersWithContextReturnsOnCall == nil {
		fake.describeCacheParametersWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.DescribeCacheParametersOutput
			result2 error
		})
	}
	fake.describeCacheParametersWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.DescribeCacheParametersOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCache) ModifyCacheParameterGroupWithContext(ctx aws.Context, input *elasticache.ModifyCacheParameterGroupInput, opts ...request.Option) (*elasticache.CacheParameterGroupNameMessage, error) {
	fake.modifyCacheParameterGroupWithContextMutex.Lock()
	ret, specificReturn := fake.modifyCacheParameterGroupWithContextReturnsOnCall[len(fake.modifyCacheParameterGroupWithContextArgsForCall)]
	fake.modifyCacheParameterGroupWithContextArgsForCall = append(fake.modifyCacheParameterGroupWithContextArgsForCall, struct {
		ctx   aws.Context
		input *elasticache.ModifyCacheParameterGroupInput
		opts  []request.Option
	}{ctx, input, opts})
	fake.recordInvocation("ModifyCacheParameterGroupWithContext", []interface{}{ctx, input, opts})
	fake.modifyCacheParameterGroupWithContextMutex.Unlock()
	if fake.ModifyCacheParameterGroupWithContextStub != nil {
		return fake.ModifyCacheParameterGroupWithContextStub(ctx, input, opts...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.modifyCacheParameterGroupWithContextReturns.result1, fake.modifyCacheParameterGroupWithContextReturns.result2
}

func (fake *FakeElastiCache) ModifyCacheParameterGroupWithContextCallCount() int {
	fake.modifyCacheParameterGroupWithContextMutex.RLock()
	defer fake.modifyCacheParameterGroupWithContextMutex.RUnlock()
	return len(fake.modifyCacheParameterGroupWithContextArgsForCall)
}

func (fake *FakeElastiCache) ModifyCacheParameterGroupWithContextArgsForCall(i int) (aws.Context, *elasticache.ModifyCacheParameterGroupInput, []request.Option) {
	fake.modifyCacheParameterGroupWithContextMutex.RLock()
	defer fake.modifyCacheParameterGroupWithContextMutex.RUnlock()
	return fake.modifyCacheParameterGroupWithContextArgsForCall[i].ctx, fake.modifyCacheParameterGroupWithContextArgsForCall[i].input, fake.modifyCacheParameterGroupWithContextArgsForCall[i].opts
}

func (fake *FakeElastiCache) ModifyCacheParameterGroupWithContextReturns(result1 *elasticache.CacheParameterGroupNameMessage, result2 error) {
	fake.ModifyCacheParameterGroupWithContextStub = nil
	fake.modifyCacheParameterGroupWithContextReturns = struct {
		result1 *elasticache.CacheParameterGroupNameMessage
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCache) ModifyCacheParameterGroupWithContextReturnsOnCall(i int, result1 *elasticache.CacheParameterGroupNameMessage, result2 error) {
	fake.ModifyCacheParameterGroupWithContextStub = nil
	if fake.modifyCacheParameterGroupWithContextReturnsOnCall == nil {
		fake.modifyCacheParameterGroupWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.CacheParameterGroupNameMessage
			result2 error
		})
	}
	fake.modifyCacheParameterGroupWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.CacheParameterGroupNameMessage
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCache) DescribeSnapshotsPagesWithContext(ctx aws.Context, input *elasticache.DescribeSnapshotsInput, fn func(*elasticache.DescribeSnapshotsOutput, bool) bool, opts ...request.Option) error {
	fake.describeSnapshotsPagesWithContextMutex.Lock()
	ret, specificReturn := fake.describeSnapshotsPagesWithContextReturnsOnCall[len(fake.describeSnapshotsPagesWithContextArgsForCall)]
	fake.describeSnapshotsPagesWithContextArgsForCall = append(fake.describeSnapshotsPagesWithContextArgsForCall, struct {
		ctx   aws.Context
		input *elasticache.DescribeSnapshotsInput
		fn    func(*elasticache.DescribeSnapshotsOutput, bool) bool
		opts  []request.Option
	}{ctx, input, fn, opts})
	fake.recordInvocation("DescribeSnapshotsPagesWithContext", []interface{}{ctx, input, fn, opts})
	fake.describeSnapshotsPagesWithContextMutex.Unlock()
	if fake.DescribeSnapshotsPagesWithContextStub != nil {
		return fake.DescribeSnapshotsPagesWithContextStub(ctx, input, fn, opts...)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.describeSnapshotsPagesWithContextReturns.result1
}

func (fake *FakeElastiCache) DescribeSnapshotsPagesWithContextCallCount() int {
	fake.describeSnapshotsPagesWithContextMutex.RLock()
	defer fake.describeSnapshotsPagesWithContextMutex.RUnlock()
	return len(fake.describeSnapshotsPagesWithContextArgsForCall)
}

func (fake *FakeElastiCache) DescribeSnapshotsPagesWithContextArgsForCall(i int) (aws.Context, *elasticache.DescribeSnapshotsInput, func(*elasticache.DescribeSnapshotsOutput, bool) bool, []request.Option) {
	fake.describeSnapshotsPagesWithContextMutex.RLock()
	defer fake.describeSnapshotsPagesWithContextMutex.RUnlock()
	return fake.describeSnapshotsPagesWithContextArgsForCall[i].ctx, fake.describeSnapshotsPagesWithContextArgsForCall[i].input, fake.describeSnapshotsPagesWithContextArgsForCall[i].fn, fake.describeSnapshotsPagesWithContextArgsForCall[i].opts
}

func (fake *FakeElastiCache) DescribeSnapshotsPagesWithContextReturns(result1 error) {
	fake.DescribeSnapshotsPagesWithContextStub = nil
	fake.describeSnapshotsPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCache) DescribeSnapshotsPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.DescribeSnapshotsPagesWithContextStub = nil
	if fake.describeSnapshotsPagesWithContextReturnsOnCall == nil {
		fake.describeSnapshotsPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.describeSnapshotsPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeElastiCache) ListTagsForResourceWithContext(ctx aws.Context, input *elasticache.ListTagsForResourceInput, opts ...request.Option) (*elasticache.TagListMessage, error) {
	fake.listTagsForResourceWithContextMutex.Lock()
	ret, specificReturn := fake.listTagsForResourceWithContextReturnsOnCall[len(fake.listTagsForResourceWithContextArgsForCall)]
	fake.listTagsForResourceWithContextArgsForCall = append(fake.listTagsForResourceWithContextArgsForCall, struct {
		ctx   aws.Context
		input *elasticache.ListTagsForResourceInput
		opts  []request.Option
	}{ctx, input, opts})
	fake.recordInvocation("ListTagsForResourceWithContext", []interface{}{ctx, input, opts})
	fake.listTagsForResourceWithContextMutex.Unlock()
	if fake.ListTagsForResourceWithContextStub != nil {
		return fake.ListTagsForResourceWithContextStub(ctx, input, opts...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.listTagsForResourceWithContextReturns.result1, fake.listTagsForResourceWithContextReturns.result2
}

func (fake *FakeElastiCache) ListTagsForResourceWithContextCallCount() int {
	fake.listTagsForResourceWithContextMutex.RLock()
	defer fake.listTagsForResourceWithContextMutex.RUnlock()
	return len(fake.listTagsForResourceWithContextArgsForCall)
}

func (fake *FakeElastiCache) ListTagsForResourceWithContextArgsForCall(i int) (aws.Context, *elasticache.ListTagsForResourceInput, []request.Option) {
	fake.listTagsForResourceWithContextMutex.RLock()
	defer fake.listTagsForResourceWithContextMutex.RUnlock()
	return fake.listTagsForResourceWithContextArgsForCall[i].ctx, fake.listTagsForResourceWithContextArgsForCall[i].input, fake.listTagsForResourceWithContextArgsForCall[i].opts
}

func (fake *FakeElastiCache) ListTagsForResourceWithContextReturns(result1 *elasticache.TagListMessage, result2 error) {
	fake.ListTagsForResourceWithContextStub = nil
	fake.listTagsForResourceWithContextReturns = struct {
		result1 *elasticache.TagListMessage
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCache) ListTagsForResourceWithContextReturnsOnCall(i int, result1 *elasticache.TagListMessage, result2 error) {
	fake.ListTagsForResourceWithContextStub = nil
	if fake.listTagsForResourceWithContextReturnsOnCall == nil {
		fake.listTagsForResourceWithContextReturnsOnCall = make(map[int]struct {
			result1 *elasticache.TagListMessage
			result2 error
		})
	}
	fake.listTagsForResourceWithContextReturnsOnCall[i] = struct {
		result1 *elasticache.TagListMessage
		result2 error
	}{result1, result2}
}

func (fake *FakeElastiCache) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createCacheParameterGroupWithContextMutex.RLock()
	defer fake.createCacheParameterGroupWithContextMutex.RUnlock()
	fake.createReplicationGroupWithContextMutex.RLock()
	defer fake.createReplicationGroupWithContextMutex.RUnlock()
	fake.deleteCacheParameterGroupWithContextMutex.RLock()
	defer fake.deleteCacheParameterGroupWithContextMutex.RUnlock()
	fake.deleteReplicationGroupWithContextMutex.RLock()
	defer fake.deleteReplicationGroupWithContextMutex.RUnlock()
	fake.describeReplicationGroupsWithContextMutex.RLock()
	defer fake.describeReplicationGroupsWithContextMutex.RUnlock()
	fake.describeCacheClustersWithContextMutex.RLock()
	defer fake.describeCacheClustersWithContextMutex.RUnlock()
	fake.describeCacheParametersWithContextMutex.RLock()
	defer fake.describeCacheParametersWithContextMutex.RUnlock()
	fake.modifyCacheParameterGroupWithContextMutex.RLock()
	defer fake.modifyCacheParameterGroupWithContextMutex.RUnlock()
	fake.describeSnapshotsPagesWithContextMutex.RLock()
	defer fake.describeSnapshotsPagesWithContextMutex.RUnlock()
	fake.listTagsForResourceWithContextMutex.RLock()
	defer fake.listTagsForResourceWithContextMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeElastiCache) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ providers.ElastiCache = new(FakeElastiCache)
